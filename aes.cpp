#include "aes.h"

#include <cstdlib>
#include <cstring>
#include <cassert>
#include <cstdio>
#include <vector>

static const u8 SBox[256] = {
    0x63U, 0x7cU, 0x77U, 0x7bU, 0xf2U, 0x6bU, 0x6fU, 0xc5U,
    0x30U, 0x01U, 0x67U, 0x2bU, 0xfeU, 0xd7U, 0xabU, 0x76U,
    0xcaU, 0x82U, 0xc9U, 0x7dU, 0xfaU, 0x59U, 0x47U, 0xf0U,
    0xadU, 0xd4U, 0xa2U, 0xafU, 0x9cU, 0xa4U, 0x72U, 0xc0U,
    0xb7U, 0xfdU, 0x93U, 0x26U, 0x36U, 0x3fU, 0xf7U, 0xccU,
    0x34U, 0xa5U, 0xe5U, 0xf1U, 0x71U, 0xd8U, 0x31U, 0x15U,
    0x04U, 0xc7U, 0x23U, 0xc3U, 0x18U, 0x96U, 0x05U, 0x9aU,
    0x07U, 0x12U, 0x80U, 0xe2U, 0xebU, 0x27U, 0xb2U, 0x75U,
    0x09U, 0x83U, 0x2cU, 0x1aU, 0x1bU, 0x6eU, 0x5aU, 0xa0U,
    0x52U, 0x3bU, 0xd6U, 0xb3U, 0x29U, 0xe3U, 0x2fU, 0x84U,
    0x53U, 0xd1U, 0x00U, 0xedU, 0x20U, 0xfcU, 0xb1U, 0x5bU,
    0x6aU, 0xcbU, 0xbeU, 0x39U, 0x4aU, 0x4cU, 0x58U, 0xcfU,
    0xd0U, 0xefU, 0xaaU, 0xfbU, 0x43U, 0x4dU, 0x33U, 0x85U,
    0x45U, 0xf9U, 0x02U, 0x7fU, 0x50U, 0x3cU, 0x9fU, 0xa8U,
    0x51U, 0xa3U, 0x40U, 0x8fU, 0x92U, 0x9dU, 0x38U, 0xf5U,
    0xbcU, 0xb6U, 0xdaU, 0x21U, 0x10U, 0xffU, 0xf3U, 0xd2U,
    0xcdU, 0x0cU, 0x13U, 0xecU, 0x5fU, 0x97U, 0x44U, 0x17U,
    0xc4U, 0xa7U, 0x7eU, 0x3dU, 0x64U, 0x5dU, 0x19U, 0x73U,
    0x60U, 0x81U, 0x4fU, 0xdcU, 0x22U, 0x2aU, 0x90U, 0x88U,
    0x46U, 0xeeU, 0xb8U, 0x14U, 0xdeU, 0x5eU, 0x0bU, 0xdbU,
    0xe0U, 0x32U, 0x3aU, 0x0aU, 0x49U, 0x06U, 0x24U, 0x5cU,
    0xc2U, 0xd3U, 0xacU, 0x62U, 0x91U, 0x95U, 0xe4U, 0x79U,
    0xe7U, 0xc8U, 0x37U, 0x6dU, 0x8dU, 0xd5U, 0x4eU, 0xa9U,
    0x6cU, 0x56U, 0xf4U, 0xeaU, 0x65U, 0x7aU, 0xaeU, 0x08U,
    0xbaU, 0x78U, 0x25U, 0x2eU, 0x1cU, 0xa6U, 0xb4U, 0xc6U,
    0xe8U, 0xddU, 0x74U, 0x1fU, 0x4bU, 0xbdU, 0x8bU, 0x8aU,
    0x70U, 0x3eU, 0xb5U, 0x66U, 0x48U, 0x03U, 0xf6U, 0x0eU,
    0x61U, 0x35U, 0x57U, 0xb9U, 0x86U, 0xc1U, 0x1dU, 0x9eU,
    0xe1U, 0xf8U, 0x98U, 0x11U, 0x69U, 0xd9U, 0x8eU, 0x94U,
    0x9bU, 0x1eU, 0x87U, 0xe9U, 0xceU, 0x55U, 0x28U, 0xdfU,
    0x8cU, 0xa1U, 0x89U, 0x0dU, 0xbfU, 0xe6U, 0x42U, 0x68U,
    0x41U, 0x99U, 0x2dU, 0x0fU, 0xb0U, 0x54U, 0xbbU, 0x16U
};

static const u8 InvSBox[256] = {
    0x52U, 0x09U, 0x6aU, 0xd5U, 0x30U, 0x36U, 0xa5U, 0x38U,
    0xbfU, 0x40U, 0xa3U, 0x9eU, 0x81U, 0xf3U, 0xd7U, 0xfbU,
    0x7cU, 0xe3U, 0x39U, 0x82U, 0x9bU, 0x2fU, 0xffU, 0x87U,
    0x34U, 0x8eU, 0x43U, 0x44U, 0xc4U, 0xdeU, 0xe9U, 0xcbU,
    0x54U, 0x7bU, 0x94U, 0x32U, 0xa6U, 0xc2U, 0x23U, 0x3dU,
    0xeeU, 0x4cU, 0x95U, 0x0bU, 0x42U, 0xfaU, 0xc3U, 0x4eU,
    0x08U, 0x2eU, 0xa1U, 0x66U, 0x28U, 0xd9U, 0x24U, 0xb2U,
    0x76U, 0x5bU, 0xa2U, 0x49U, 0x6dU, 0x8bU, 0xd1U, 0x25U,
    0x72U, 0xf8U, 0xf6U, 0x64U, 0x86U, 0x68U, 0x98U, 0x16U,
    0xd4U, 0xa4U, 0x5cU, 0xccU, 0x5dU, 0x65U, 0xb6U, 0x92U,
    0x6cU, 0x70U, 0x48U, 0x50U, 0xfdU, 0xedU, 0xb9U, 0xdaU,
    0x5eU, 0x15U, 0x46U, 0x57U, 0xa7U, 0x8dU, 0x9dU, 0x84U,
    0x90U, 0xd8U, 0xabU, 0x00U, 0x8cU, 0xbcU, 0xd3U, 0x0aU,
    0xf7U, 0xe4U, 0x58U, 0x05U, 0xb8U, 0xb3U, 0x45U, 0x06U,
    0xd0U, 0x2cU, 0x1eU, 0x8fU, 0xcaU, 0x3fU, 0x0fU, 0x02U,
    0xc1U, 0xafU, 0xbdU, 0x03U, 0x01U, 0x13U, 0x8aU, 0x6bU,
    0x3aU, 0x91U, 0x11U, 0x41U, 0x4fU, 0x67U, 0xdcU, 0xeaU,
    0x97U, 0xf2U, 0xcfU, 0xceU, 0xf0U, 0xb4U, 0xe6U, 0x73U,
    0x96U, 0xacU, 0x74U, 0x22U, 0xe7U, 0xadU, 0x35U, 0x85U,
    0xe2U, 0xf9U, 0x37U, 0xe8U, 0x1cU, 0x75U, 0xdfU, 0x6eU,
    0x47U, 0xf1U, 0x1aU, 0x71U, 0x1dU, 0x29U, 0xc5U, 0x89U,
    0x6fU, 0xb7U, 0x62U, 0x0eU, 0xaaU, 0x18U, 0xbeU, 0x1bU,
    0xfcU, 0x56U, 0x3eU, 0x4bU, 0xc6U, 0xd2U, 0x79U, 0x20U,
    0x9aU, 0xdbU, 0xc0U, 0xfeU, 0x78U, 0xcdU, 0x5aU, 0xf4U,
    0x1fU, 0xddU, 0xa8U, 0x33U, 0x88U, 0x07U, 0xc7U, 0x31U,
    0xb1U, 0x12U, 0x10U, 0x59U, 0x27U, 0x80U, 0xecU, 0x5fU,
    0x60U, 0x51U, 0x7fU, 0xa9U, 0x19U, 0xb5U, 0x4aU, 0x0dU,
    0x2dU, 0xe5U, 0x7aU, 0x9fU, 0x93U, 0xc9U, 0x9cU, 0xefU,
    0xa0U, 0xe0U, 0x3bU, 0x4dU, 0xaeU, 0x2aU, 0xf5U, 0xb0U,
    0xc8U, 0xebU, 0xbbU, 0x3cU, 0x83U, 0x53U, 0x99U, 0x61U,
    0x17U, 0x2bU, 0x04U, 0x7eU, 0xbaU, 0x77U, 0xd6U, 0x26U,
    0xe1U, 0x69U, 0x14U, 0x63U, 0x55U, 0x21U, 0x0cU, 0x7dU,
};

static const u8 GMul2[256] = 
{
    0x00,0x02,0x04,0x06,0x08,0x0a,0x0c,0x0e,0x10,0x12,0x14,0x16,0x18,0x1a,0x1c,0x1e,
    0x20,0x22,0x24,0x26,0x28,0x2a,0x2c,0x2e,0x30,0x32,0x34,0x36,0x38,0x3a,0x3c,0x3e,
    0x40,0x42,0x44,0x46,0x48,0x4a,0x4c,0x4e,0x50,0x52,0x54,0x56,0x58,0x5a,0x5c,0x5e,
    0x60,0x62,0x64,0x66,0x68,0x6a,0x6c,0x6e,0x70,0x72,0x74,0x76,0x78,0x7a,0x7c,0x7e,	
    0x80,0x82,0x84,0x86,0x88,0x8a,0x8c,0x8e,0x90,0x92,0x94,0x96,0x98,0x9a,0x9c,0x9e,
    0xa0,0xa2,0xa4,0xa6,0xa8,0xaa,0xac,0xae,0xb0,0xb2,0xb4,0xb6,0xb8,0xba,0xbc,0xbe,
    0xc0,0xc2,0xc4,0xc6,0xc8,0xca,0xcc,0xce,0xd0,0xd2,0xd4,0xd6,0xd8,0xda,0xdc,0xde,
    0xe0,0xe2,0xe4,0xe6,0xe8,0xea,0xec,0xee,0xf0,0xf2,0xf4,0xf6,0xf8,0xfa,0xfc,0xfe,
    0x1b,0x19,0x1f,0x1d,0x13,0x11,0x17,0x15,0x0b,0x09,0x0f,0x0d,0x03,0x01,0x07,0x05,
    0x3b,0x39,0x3f,0x3d,0x33,0x31,0x37,0x35,0x2b,0x29,0x2f,0x2d,0x23,0x21,0x27,0x25,
    0x5b,0x59,0x5f,0x5d,0x53,0x51,0x57,0x55,0x4b,0x49,0x4f,0x4d,0x43,0x41,0x47,0x45,
    0x7b,0x79,0x7f,0x7d,0x73,0x71,0x77,0x75,0x6b,0x69,0x6f,0x6d,0x63,0x61,0x67,0x65,
    0x9b,0x99,0x9f,0x9d,0x93,0x91,0x97,0x95,0x8b,0x89,0x8f,0x8d,0x83,0x81,0x87,0x85,
    0xbb,0xb9,0xbf,0xbd,0xb3,0xb1,0xb7,0xb5,0xab,0xa9,0xaf,0xad,0xa3,0xa1,0xa7,0xa5,
    0xdb,0xd9,0xdf,0xdd,0xd3,0xd1,0xd7,0xd5,0xcb,0xc9,0xcf,0xcd,0xc3,0xc1,0xc7,0xc5,
    0xfb,0xf9,0xff,0xfd,0xf3,0xf1,0xf7,0xf5,0xeb,0xe9,0xef,0xed,0xe3,0xe1,0xe7,0xe5
};


static const u8 GMul3[256] = 
{
    0x00,0x03,0x06,0x05,0x0c,0x0f,0x0a,0x09,0x18,0x1b,0x1e,0x1d,0x14,0x17,0x12,0x11,
    0x30,0x33,0x36,0x35,0x3c,0x3f,0x3a,0x39,0x28,0x2b,0x2e,0x2d,0x24,0x27,0x22,0x21,
    0x60,0x63,0x66,0x65,0x6c,0x6f,0x6a,0x69,0x78,0x7b,0x7e,0x7d,0x74,0x77,0x72,0x71,
    0x50,0x53,0x56,0x55,0x5c,0x5f,0x5a,0x59,0x48,0x4b,0x4e,0x4d,0x44,0x47,0x42,0x41,
    0xc0,0xc3,0xc6,0xc5,0xcc,0xcf,0xca,0xc9,0xd8,0xdb,0xde,0xdd,0xd4,0xd7,0xd2,0xd1,
    0xf0,0xf3,0xf6,0xf5,0xfc,0xff,0xfa,0xf9,0xe8,0xeb,0xee,0xed,0xe4,0xe7,0xe2,0xe1,
    0xa0,0xa3,0xa6,0xa5,0xac,0xaf,0xaa,0xa9,0xb8,0xbb,0xbe,0xbd,0xb4,0xb7,0xb2,0xb1,
    0x90,0x93,0x96,0x95,0x9c,0x9f,0x9a,0x99,0x88,0x8b,0x8e,0x8d,0x84,0x87,0x82,0x81,	
    0x9b,0x98,0x9d,0x9e,0x97,0x94,0x91,0x92,0x83,0x80,0x85,0x86,0x8f,0x8c,0x89,0x8a,
    0xab,0xa8,0xad,0xae,0xa7,0xa4,0xa1,0xa2,0xb3,0xb0,0xb5,0xb6,0xbf,0xbc,0xb9,0xba,
    0xfb,0xf8,0xfd,0xfe,0xf7,0xf4,0xf1,0xf2,0xe3,0xe0,0xe5,0xe6,0xef,0xec,0xe9,0xea,	
    0xcb,0xc8,0xcd,0xce,0xc7,0xc4,0xc1,0xc2,0xd3,0xd0,0xd5,0xd6,0xdf,0xdc,0xd9,0xda,	
    0x5b,0x58,0x5d,0x5e,0x57,0x54,0x51,0x52,0x43,0x40,0x45,0x46,0x4f,0x4c,0x49,0x4a,
    0x6b,0x68,0x6d,0x6e,0x67,0x64,0x61,0x62,0x73,0x70,0x75,0x76,0x7f,0x7c,0x79,0x7a,	
    0x3b,0x38,0x3d,0x3e,0x37,0x34,0x31,0x32,0x23,0x20,0x25,0x26,0x2f,0x2c,0x29,0x2a,
    0x0b,0x08,0x0d,0x0e,0x07,0x04,0x01,0x02,0x13,0x10,0x15,0x16,0x1f,0x1c,0x19,0x1a
};

static const u8 GMul9[256] = 
{
    0x00,0x09,0x12,0x1b,0x24,0x2d,0x36,0x3f,0x48,0x41,0x5a,0x53,0x6c,0x65,0x7e,0x77,
    0x90,0x99,0x82,0x8b,0xb4,0xbd,0xa6,0xaf,0xd8,0xd1,0xca,0xc3,0xfc,0xf5,0xee,0xe7,
    0x3b,0x32,0x29,0x20,0x1f,0x16,0x0d,0x04,0x73,0x7a,0x61,0x68,0x57,0x5e,0x45,0x4c,
    0xab,0xa2,0xb9,0xb0,0x8f,0x86,0x9d,0x94,0xe3,0xea,0xf1,0xf8,0xc7,0xce,0xd5,0xdc,
    0x76,0x7f,0x64,0x6d,0x52,0x5b,0x40,0x49,0x3e,0x37,0x2c,0x25,0x1a,0x13,0x08,0x01,
    0xe6,0xef,0xf4,0xfd,0xc2,0xcb,0xd0,0xd9,0xae,0xa7,0xbc,0xb5,0x8a,0x83,0x98,0x91,
    0x4d,0x44,0x5f,0x56,0x69,0x60,0x7b,0x72,0x05,0x0c,0x17,0x1e,0x21,0x28,0x33,0x3a,
    0xdd,0xd4,0xcf,0xc6,0xf9,0xf0,0xeb,0xe2,0x95,0x9c,0x87,0x8e,0xb1,0xb8,0xa3,0xaa,	
    0xec,0xe5,0xfe,0xf7,0xc8,0xc1,0xda,0xd3,0xa4,0xad,0xb6,0xbf,0x80,0x89,0x92,0x9b,	
    0x7c,0x75,0x6e,0x67,0x58,0x51,0x4a,0x43,0x34,0x3d,0x26,0x2f,0x10,0x19,0x02,0x0b,
    0xd7,0xde,0xc5,0xcc,0xf3,0xfa,0xe1,0xe8,0x9f,0x96,0x8d,0x84,0xbb,0xb2,0xa9,0xa0,
    0x47,0x4e,0x55,0x5c,0x63,0x6a,0x71,0x78,0x0f,0x06,0x1d,0x14,0x2b,0x22,0x39,0x30,
    0x9a,0x93,0x88,0x81,0xbe,0xb7,0xac,0xa5,0xd2,0xdb,0xc0,0xc9,0xf6,0xff,0xe4,0xed,
    0x0a,0x03,0x18,0x11,0x2e,0x27,0x3c,0x35,0x42,0x4b,0x50,0x59,0x66,0x6f,0x74,0x7d,	
    0xa1,0xa8,0xb3,0xba,0x85,0x8c,0x97,0x9e,0xe9,0xe0,0xfb,0xf2,0xcd,0xc4,0xdf,0xd6,
    0x31,0x38,0x23,0x2a,0x15,0x1c,0x07,0x0e,0x79,0x70,0x6b,0x62,0x5d,0x54,0x4f,0x46
};

static const u8 GMul11[256] = 
{
    0x00,0x0b,0x16,0x1d,0x2c,0x27,0x3a,0x31,0x58,0x53,0x4e,0x45,0x74,0x7f,0x62,0x69,
    0xb0,0xbb,0xa6,0xad,0x9c,0x97,0x8a,0x81,0xe8,0xe3,0xfe,0xf5,0xc4,0xcf,0xd2,0xd9,
    0x7b,0x70,0x6d,0x66,0x57,0x5c,0x41,0x4a,0x23,0x28,0x35,0x3e,0x0f,0x04,0x19,0x12,
    0xcb,0xc0,0xdd,0xd6,0xe7,0xec,0xf1,0xfa,0x93,0x98,0x85,0x8e,0xbf,0xb4,0xa9,0xa2,
    0xf6,0xfd,0xe0,0xeb,0xda,0xd1,0xcc,0xc7,0xae,0xa5,0xb8,0xb3,0x82,0x89,0x94,0x9f,
    0x46,0x4d,0x50,0x5b,0x6a,0x61,0x7c,0x77,0x1e,0x15,0x08,0x03,0x32,0x39,0x24,0x2f,
    0x8d,0x86,0x9b,0x90,0xa1,0xaa,0xb7,0xbc,0xd5,0xde,0xc3,0xc8,0xf9,0xf2,0xef,0xe4,
    0x3d,0x36,0x2b,0x20,0x11,0x1a,0x07,0x0c,0x65,0x6e,0x73,0x78,0x49,0x42,0x5f,0x54,
    0xf7,0xfc,0xe1,0xea,0xdb,0xd0,0xcd,0xc6,0xaf,0xa4,0xb9,0xb2,0x83,0x88,0x95,0x9e,
    0x47,0x4c,0x51,0x5a,0x6b,0x60,0x7d,0x76,0x1f,0x14,0x09,0x02,0x33,0x38,0x25,0x2e,
    0x8c,0x87,0x9a,0x91,0xa0,0xab,0xb6,0xbd,0xd4,0xdf,0xc2,0xc9,0xf8,0xf3,0xee,0xe5,
    0x3c,0x37,0x2a,0x21,0x10,0x1b,0x06,0x0d,0x64,0x6f,0x72,0x79,0x48,0x43,0x5e,0x55,
    0x01,0x0a,0x17,0x1c,0x2d,0x26,0x3b,0x30,0x59,0x52,0x4f,0x44,0x75,0x7e,0x63,0x68,
    0xb1,0xba,0xa7,0xac,0x9d,0x96,0x8b,0x80,0xe9,0xe2,0xff,0xf4,0xc5,0xce,0xd3,0xd8,
    0x7a,0x71,0x6c,0x67,0x56,0x5d,0x40,0x4b,0x22,0x29,0x34,0x3f,0x0e,0x05,0x18,0x13,
    0xca,0xc1,0xdc,0xd7,0xe6,0xed,0xf0,0xfb,0x92,0x99,0x84,0x8f,0xbe,0xb5,0xa8,0xa3
};

static const u8 GMul13[256] = 
{
    0x00,0x0d,0x1a,0x17,0x34,0x39,0x2e,0x23,0x68,0x65,0x72,0x7f,0x5c,0x51,0x46,0x4b,
    0xd0,0xdd,0xca,0xc7,0xe4,0xe9,0xfe,0xf3,0xb8,0xb5,0xa2,0xaf,0x8c,0x81,0x96,0x9b,
    0xbb,0xb6,0xa1,0xac,0x8f,0x82,0x95,0x98,0xd3,0xde,0xc9,0xc4,0xe7,0xea,0xfd,0xf0,
    0x6b,0x66,0x71,0x7c,0x5f,0x52,0x45,0x48,0x03,0x0e,0x19,0x14,0x37,0x3a,0x2d,0x20,
    0x6d,0x60,0x77,0x7a,0x59,0x54,0x43,0x4e,0x05,0x08,0x1f,0x12,0x31,0x3c,0x2b,0x26,
    0xbd,0xb0,0xa7,0xaa,0x89,0x84,0x93,0x9e,0xd5,0xd8,0xcf,0xc2,0xe1,0xec,0xfb,0xf6,
    0xd6,0xdb,0xcc,0xc1,0xe2,0xef,0xf8,0xf5,0xbe,0xb3,0xa4,0xa9,0x8a,0x87,0x90,0x9d,
    0x06,0x0b,0x1c,0x11,0x32,0x3f,0x28,0x25,0x6e,0x63,0x74,0x79,0x5a,0x57,0x40,0x4d,
    0xda,0xd7,0xc0,0xcd,0xee,0xe3,0xf4,0xf9,0xb2,0xbf,0xa8,0xa5,0x86,0x8b,0x9c,0x91,
    0x0a,0x07,0x10,0x1d,0x3e,0x33,0x24,0x29,0x62,0x6f,0x78,0x75,0x56,0x5b,0x4c,0x41,
    0x61,0x6c,0x7b,0x76,0x55,0x58,0x4f,0x42,0x09,0x04,0x13,0x1e,0x3d,0x30,0x27,0x2a,
    0xb1,0xbc,0xab,0xa6,0x85,0x88,0x9f,0x92,0xd9,0xd4,0xc3,0xce,0xed,0xe0,0xf7,0xfa,
    0xb7,0xba,0xad,0xa0,0x83,0x8e,0x99,0x94,0xdf,0xd2,0xc5,0xc8,0xeb,0xe6,0xf1,0xfc,
    0x67,0x6a,0x7d,0x70,0x53,0x5e,0x49,0x44,0x0f,0x02,0x15,0x18,0x3b,0x36,0x21,0x2c,
    0x0c,0x01,0x16,0x1b,0x38,0x35,0x22,0x2f,0x64,0x69,0x7e,0x73,0x50,0x5d,0x4a,0x47,
    0xdc,0xd1,0xc6,0xcb,0xe8,0xe5,0xf2,0xff,0xb4,0xb9,0xae,0xa3,0x80,0x8d,0x9a,0x97
};

static const u8 GMul14[256] = 
{
    0x00,0x0e,0x1c,0x12,0x38,0x36,0x24,0x2a,0x70,0x7e,0x6c,0x62,0x48,0x46,0x54,0x5a,
    0xe0,0xee,0xfc,0xf2,0xd8,0xd6,0xc4,0xca,0x90,0x9e,0x8c,0x82,0xa8,0xa6,0xb4,0xba,
    0xdb,0xd5,0xc7,0xc9,0xe3,0xed,0xff,0xf1,0xab,0xa5,0xb7,0xb9,0x93,0x9d,0x8f,0x81,
    0x3b,0x35,0x27,0x29,0x03,0x0d,0x1f,0x11,0x4b,0x45,0x57,0x59,0x73,0x7d,0x6f,0x61,
    0xad,0xa3,0xb1,0xbf,0x95,0x9b,0x89,0x87,0xdd,0xd3,0xc1,0xcf,0xe5,0xeb,0xf9,0xf7,
    0x4d,0x43,0x51,0x5f,0x75,0x7b,0x69,0x67,0x3d,0x33,0x21,0x2f,0x05,0x0b,0x19,0x17,
    0x76,0x78,0x6a,0x64,0x4e,0x40,0x52,0x5c,0x06,0x08,0x1a,0x14,0x3e,0x30,0x22,0x2c,
    0x96,0x98,0x8a,0x84,0xae,0xa0,0xb2,0xbc,0xe6,0xe8,0xfa,0xf4,0xde,0xd0,0xc2,0xcc,
    0x41,0x4f,0x5d,0x53,0x79,0x77,0x65,0x6b,0x31,0x3f,0x2d,0x23,0x09,0x07,0x15,0x1b,
    0xa1,0xaf,0xbd,0xb3,0x99,0x97,0x85,0x8b,0xd1,0xdf,0xcd,0xc3,0xe9,0xe7,0xf5,0xfb,
    0x9a,0x94,0x86,0x88,0xa2,0xac,0xbe,0xb0,0xea,0xe4,0xf6,0xf8,0xd2,0xdc,0xce,0xc0,
    0x7a,0x74,0x66,0x68,0x42,0x4c,0x5e,0x50,0x0a,0x04,0x16,0x18,0x32,0x3c,0x2e,0x20,
    0xec,0xe2,0xf0,0xfe,0xd4,0xda,0xc8,0xc6,0x9c,0x92,0x80,0x8e,0xa4,0xaa,0xb8,0xb6,
    0x0c,0x02,0x10,0x1e,0x34,0x3a,0x28,0x26,0x7c,0x72,0x60,0x6e,0x44,0x4a,0x58,0x56,
    0x37,0x39,0x2b,0x25,0x0f,0x01,0x13,0x1d,0x47,0x49,0x5b,0x55,0x7f,0x71,0x63,0x6d,
    0xd7,0xd9,0xcb,0xc5,0xef,0xe1,0xf3,0xfd,0xa7,0xa9,0xbb,0xb5,0x9f,0x91,0x83,0x8d
};

static const u32 RconLUT[15] = 
{
    0x01000000U, 0x02000000U, 0x04000000U, 0x08000000U,
    0x10000000U, 0x20000000U, 0x40000000U, 0x80000000U,
    0x1b000000U, 0x36000000U, 0x6c000000U, 0xd8000000U,
    0xab000000U, 0x4d000000U, 0x9a000000U
};

//------------------------- Key Expansion ----------------------------

void GetKeyOffset(u8* key, u8* out, uint offset)
{
    out[0] = key[offset];
    out[1] = key[offset+1];
    out[2] = key[offset+2];
    out[3] = key[offset+3];
}


void subWord(u8* in, u8* out)
{
    out[0] = SBox[in[0]];
    out[1] = SBox[in[1]];
    out[2] = SBox[in[2]];
    out[3] = SBox[in[3]];
}

void rotWord(u8* in, u8* out)
{
    //circular shift  
    //[0, 1, 2, 3] --> [1, 2, 3, 1]
    out[0] = in[1];
    out[1] = in[2];
    out[2] = in[3];
    out[3] = in[0];
}

void rcon(u8* out, uint i)
{
    u32 tmp = RconLUT[i];
    u8* ptr = (u8*)&tmp;
    out[0] = ptr[3];
    out[1] = ptr[2];
    out[2] = ptr[1];
    out[3] = ptr[0];
}

void expandKey(u8* keyIn, u8* keyOut) 
{
    // keyIn -> 16 bytes
    // keyOut -> 172 bytes

    for(uint i = 0; i < 44; i++)
    {
        if(i < 4)
        {
            u8 tmp[4]{};
            GetKeyOffset(keyIn, tmp, i*4);
            memcpy(&keyOut[i*4], tmp, sizeof(u8) * 4);
            continue;
        }
        
        if(i%4 == 0)
        {
            u8 a[4]{};
            u8 b[4]{};
            u8 c[4]{};

            u8 tmp[4]{};
            GetKeyOffset(keyOut, tmp, (i-1)*4);
            rotWord(tmp, a);
            memcpy(tmp, a, sizeof(u8) * 4);
            subWord(tmp, a);

            rcon(b, (i/4)-1);

            GetKeyOffset(keyOut, c, (i-4)*4);
            
            keyOut[(i*4) + 0] = a[0] ^ b[0] ^ c[0];
            keyOut[(i*4) + 1] = a[1] ^ b[1] ^ c[1];
            keyOut[(i*4) + 2] = a[2] ^ b[2] ^ c[2];
            keyOut[(i*4) + 3] = a[3] ^ b[3] ^ c[3];

            continue;
        }

        else
        {
            u8 a[4]{};
            u8 b[4]{};
            GetKeyOffset(keyOut, a, (i-1)*4);
            GetKeyOffset(keyOut, b, (i-4)*4);

            keyOut[(i*4) + 0] = a[0] ^ b[0];
            keyOut[(i*4) + 1] = a[1] ^ b[1];
            keyOut[(i*4) + 2] = a[2] ^ b[2];
            keyOut[(i*4) + 3] = a[3] ^ b[3];
        }
    }
}

void expandKey(u8* keyIn, u8* keyOut, uint rounds) 
{
    // keyIn -> 16 bytes
    // keyOut -> 176 bytes 

    uint n = 44;
    if(rounds > 10)
        n += 4*(rounds - 10) + 1;


    for(uint i = 0; i < n; i++)
    {
        if(i < 4)
        {
            u8 tmp[4]{};
            GetKeyOffset(keyIn, tmp, i*4);
            memcpy(&keyOut[i*4], tmp, sizeof(u8) * 4);
            continue;
        }
        
        if(i%4 == 0)
        {
            u8 a[4]{};
            u8 b[4]{};
            u8 c[4]{};

            u8 tmp[4]{};
            GetKeyOffset(keyOut, tmp, (i-1)*4);
            rotWord(tmp, a);
            memcpy(tmp, a, sizeof(u8) * 4);
            subWord(tmp, a);

            rcon(b, (i/4)-1);

            GetKeyOffset(keyOut, c, (i-4)*4);
            
            keyOut[(i*4) + 0] = a[0] ^ b[0] ^ c[0];
            keyOut[(i*4) + 1] = a[1] ^ b[1] ^ c[1];
            keyOut[(i*4) + 2] = a[2] ^ b[2] ^ c[2];
            keyOut[(i*4) + 3] = a[3] ^ b[3] ^ c[3];

            continue;
        }

        else
        {
            u8 a[4]{};
            u8 b[4]{};
            GetKeyOffset(keyOut, a, (i-1)*4);
            GetKeyOffset(keyOut, b, (i-4)*4);

            keyOut[(i*4) + 0] = a[0] ^ b[0];
            keyOut[(i*4) + 1] = a[1] ^ b[1];
            keyOut[(i*4) + 2] = a[2] ^ b[2];
            keyOut[(i*4) + 3] = a[3] ^ b[3];
        }
    }
}



//--------------------------- AES -------------------------------------


void addRoundKey(U128* state, U128* key) 
{
    for(uint i = 0; i < 16; i++)
    {
        state->vec8u[i] = state->vec8u[i] ^ key->vec8u[i];
    }
}

void subBytes(U128* state)
{
    for(int i = 0; i < 16; i++)
        state->vec8u[i] = SBox[state->vec8u[i]]; 
}

void invSubBytes(U128* state)
{
    for(int i = 0; i < 16; i++)
        state->vec8u[i] = InvSBox[state->vec8u[i]]; 
}

void shiftRows(U128* state)
{
    u8 r0[4] = {state->vec8u[0], state->vec8u[4],state->vec8u[8],  state->vec8u[12]};
    u8 r1[4] = {state->vec8u[1], state->vec8u[5],state->vec8u[9],  state->vec8u[13]};
    u8 r2[4] = {state->vec8u[2], state->vec8u[6],state->vec8u[10], state->vec8u[14]};
    u8 r3[4] = {state->vec8u[3], state->vec8u[7],state->vec8u[11], state->vec8u[15]};

    //shift r1 1 position to the left
    u8 tmp[4]{};
    tmp[0] = r1[1];
    tmp[1] = r1[2];
    tmp[2] = r1[3];
    tmp[3] = r1[0];
    memcpy(r1, tmp, sizeof(u8) * 4);

    //shift r2 2 positions to the left 
    tmp[0] = r2[2];
    tmp[1] = r2[3];
    tmp[2] = r2[0];
    tmp[3] = r2[1];
    memcpy(r2, tmp, sizeof(u8) * 4);

    //shift r3 3 positions to the left 
    tmp[0] = r3[3];
    tmp[1] = r3[0];
    tmp[2] = r3[1];
    tmp[3] = r3[2];
    memcpy(r3, tmp, sizeof(u8) * 4);

    for(int i = 0; i < 16; i+=4)
    {
        state->vec8u[i] =   r0[i/4];
        state->vec8u[i+1] = r1[i/4];
        state->vec8u[i+2] = r2[i/4];
        state->vec8u[i+3] = r3[i/4];
    }
}

void invShiftRows(U128* state)
{
    u8 r0[4] = {state->vec8u[0], state->vec8u[4],state->vec8u[8],  state->vec8u[12]};
    u8 r1[4] = {state->vec8u[1], state->vec8u[5],state->vec8u[9],  state->vec8u[13]};
    u8 r2[4] = {state->vec8u[2], state->vec8u[6],state->vec8u[10], state->vec8u[14]};
    u8 r3[4] = {state->vec8u[3], state->vec8u[7],state->vec8u[11], state->vec8u[15]};

    //shift r1 1 position to the right
    u8 tmp[4]{};
    tmp[0] = r1[3];
    tmp[1] = r1[0];
    tmp[2] = r1[1];
    tmp[3] = r1[2];
    memcpy(r1, tmp, sizeof(u8) * 4);

    //shift r2 2 positions to the right 
    tmp[0] = r2[2];
    tmp[1] = r2[3];
    tmp[2] = r2[0];
    tmp[3] = r2[1];
    memcpy(r2, tmp, sizeof(u8) * 4);

    //shift r3 3 positions to the right 
    tmp[0] = r3[1];
    tmp[1] = r3[2];
    tmp[2] = r3[3];
    tmp[3] = r3[0];
    memcpy(r3, tmp, sizeof(u8) * 4);

    for(int i = 0; i < 16; i+=4)
    {
        state->vec8u[i] =   r0[i/4];
        state->vec8u[i+1] = r1[i/4];
        state->vec8u[i+2] = r2[i/4];
        state->vec8u[i+3] = r3[i/4];
    }
}

void GMixColumn(u8* in)
{
    // multiplication matrix
    // {2, 3, 1, 1,
    //  1, 2, 3, 1,
    //  1, 1, 2, 3,
    //  3, 1, 1, 2}

    u8 tmp[4]{};

    tmp[0] = GMul2[in[0]] ^ GMul3[in[1]] ^ in[2]        ^ in[3];
    tmp[1] = in[0]        ^ GMul2[in[1]] ^ GMul3[in[2]] ^ in[3];
    tmp[2] = in[0]        ^ in[1]        ^ GMul2[in[2]] ^ GMul3[in[3]];
    tmp[3] = GMul3[in[0]] ^ in[1]        ^ in[2]        ^ GMul2[in[3]];

    memcpy(in, tmp, sizeof(u8) * 4);
}

void GInvMixColumn(u8* in)
{
    // multiplication matrix
    // {2, 3, 1, 1,
    //  1, 2, 3, 1,
    //  1, 1, 2, 3,
    //  3, 1, 1, 2}

    u8 tmp[4]{};

    tmp[0] = GMul14[in[0]] ^ GMul11[in[1]] ^ GMul13[in[2]] ^ GMul9[in[3]];
    tmp[1] = GMul9[in[0]]  ^ GMul14[in[1]] ^ GMul11[in[2]] ^ GMul13[in[3]];
    tmp[2] = GMul13[in[0]] ^ GMul9[in[1]]  ^ GMul14[in[2]] ^ GMul11[in[3]];
    tmp[3] = GMul11[in[0]] ^ GMul13[in[1]] ^ GMul9[in[2]]  ^ GMul14[in[3]];

    memcpy(in, tmp, sizeof(u8) * 4);
}

void mixColumns(U128* state)
{
    for(uint i = 0; i < 16; i+=4)
        GMixColumn(&state->vec8u[i]);
}

void invMixColumns(U128* state)
{
    for(uint i = 0; i < 16; i+=4)
        GInvMixColumn(&state->vec8u[i]);
}

void printBytes(u8* bytes)
{
    printf("\n");
    for(int i = 0; i < 16; i++)
    {
        if((i+1) % 4 == 0)
            printf(" 0x%x\n", *bytes++);
        else
            printf(" 0x%x ", *bytes++);
    }
    printf("\n");
}

//regular implementation of aes128 encryption with 10 rounds
void aes128(U128* in, U128* out, U128* key)
{
    U128 expKey[11]{};
    expandKey(key->vec8u, expKey->vec8u);

    U128 state = *in;

    //initial round:
    addRoundKey(&state, &expKey[0]);
    
    //intermediate rounds:
    for(uint i = 1; i <= 9; i++)
    {
        subBytes(&state);
        shiftRows(&state);
        mixColumns(&state);
        addRoundKey(&state, &expKey[i]);
    }

    //final round
    subBytes(&state);
    shiftRows(&state);
    addRoundKey(&state, &expKey[10]);

    *out = state;
}

//aes128 encryption implementation that allows a custom number of rounds
void aes128(U128* in, U128* out, U128* key, uint rounds)
{
    uint numKeyBlocks = 11;
    if(rounds > 10)
        numKeyBlocks += rounds - 10 + 1; 
        
    std::vector<U128> expKey(numKeyBlocks, {0});
    expandKey(key->vec8u, expKey[0].vec8u, rounds);

    U128 state = *in;

    //initial round:
    addRoundKey(&state, &expKey[0]);
    
    //intermediate rounds:
    for(uint i = 1; i <= rounds; i++)
    {
        subBytes(&state);
        shiftRows(&state);
        mixColumns(&state);
        addRoundKey(&state, &expKey[i]);
    }

    //final round
    subBytes(&state);
    shiftRows(&state);
    addRoundKey(&state, &expKey[10]);

    *out = state;
}

//regular aes128 decryption implementation with 10 rounds
void aes128Inv(U128* in, U128* out, U128* key)
{
    U128 expKey[11]{};
    expandKey(key->vec8u, expKey->vec8u);

    U128 state = *in;

    //initial round:
    addRoundKey(&state, &expKey[10]);
    
    //intermediate rounds:
    for(uint i = 9; i >= 1; i--)
    {
        invShiftRows(&state);
        invSubBytes(&state);
        addRoundKey(&state, &expKey[i]);
        invMixColumns(&state);
    }

    //final round
    invShiftRows(&state);
    invSubBytes(&state);
    addRoundKey(&state, &expKey[0]);

    *out = state;
}

//aes128 decryption implementation that allows a custom number of rounds
void aes128Inv(U128* in, U128* out, U128* key, uint rounds)
{
    uint numKeyBlocks = 11;
    if(rounds > 10)
        numKeyBlocks = rounds - 10 + 1; 

    std::vector<U128> expKey(numKeyBlocks, {0});
    expandKey(key->vec8u, expKey[0].vec8u, rounds);

    U128 state = *in;

    //initial round:
    addRoundKey(&state, &expKey[10]);
    
    //intermediate rounds:
    for(uint i = rounds; i >= 1; i--)
    {
        invShiftRows(&state);
        invSubBytes(&state);
        addRoundKey(&state, &expKey[i]);
        invMixColumns(&state);
    }

    //final round
    invShiftRows(&state);
    invSubBytes(&state);
    addRoundKey(&state, &expKey[0]);

    *out = state;
}

void aes128_ecb_enc(U128* in, 
                U128* out, 
                uint sizeBytes,
                U128* key)
{
    assert(sizeBytes % 16 == 0) ;

    uint n = sizeBytes / 16;

    for(uint i = 0; i < n; i+=1)
    {
        aes128(&in[i], &out[i], key);
    }
}

void aes128_ecb_dec(U128* in, 
                U128* out, 
                uint sizeBytes,
                U128* key)
{
    assert(sizeBytes % 16 == 0) ;

    uint n = sizeBytes / 16;

    for(uint i = 0; i < n; i+=n)
    {
        aes128Inv(in+i, out+i, key);
    }
}

void aes128_ecb_enc(U128* in, 
                U128* out, 
                uint sizeBytes,
                U128* key,
                uint rounds)
{
    assert(sizeBytes % 16 == 0) ;

    uint n = sizeBytes / 16;

    for(uint i = 0; i < n; i+=1)
    {
        aes128(&in[i], &out[i], key, rounds);
    }
}

void aes128_ecb_dec(U128* in, 
                U128* out, 
                uint sizeBytes,
                U128* key,
                uint rounds)
{
    assert(sizeBytes % 16 == 0) ;

    uint n = sizeBytes / 16;

    for(uint i = 0; i < n; i+=n)
    {
        aes128Inv(in+i, out+i, key, rounds);
    }
}

void aes128_ctr_enc(U128* in, 
                    U128* out, 
                    u64 nonce,
                    uint sizeBytes,
                    U128* key)
{
    uint n;
    (sizeBytes % 16 == 0)? n = sizeBytes/16 : n = sizeBytes/16 + 1;
    
    std::vector<U128> keystream(n, {0});
    for(uint i = 0; i < n; i++)
    {
        U128 block{};
        block.vec64u[0] = nonce;
        block.vec64u[1] = i;

        aes128(&block, &keystream[i], key);
    }
    
    for(uint i = 0; i < n; i++)
    {
        for(uint byte = 0; byte < 16; byte++)
        {
            out[i].vec8u[byte] = 
                in[i].vec8u[byte] ^ keystream[i].vec8u[byte];
        }
    }
}

void aes128_ctr_enc(U128* in, 
                    U128* out, 
                    u64 nonce,
                    uint sizeBytes,
                    U128* key, 
                    uint rounds)
{
    uint n;
    (sizeBytes % 16 == 0)? n = sizeBytes/16 : n = sizeBytes/16 + 1;
    
    std::vector<U128> keystream(n, {0});
    for(uint i = 0; i < n; i++)
    {
        U128 block{};
        block.vec64u[0] = nonce;
        block.vec64u[1] = i;

        aes128(&block, &keystream[i], key, rounds);
    }
    
    for(uint i = 0; i < n; i++)
    {
        for(uint byte = 0; byte < 16; byte++)
        {
            out[i].vec8u[byte] = 
                in[i].vec8u[byte] ^ keystream[i].vec8u[byte];
        }
    }
}




